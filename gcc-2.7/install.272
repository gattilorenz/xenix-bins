HOW TO INSTALL THIS UNDER SCO UNIX:

This is a guide how to install the GNU Development System on a SCO Unix
Rel.3.2 Base Operating System, without the SCO Development System (if you
have that, get the gcc distribution from ftp.celestial.com or from the
SCO Skunk CDROMs) :

If you have Linux or UnixWare, please read this, but DON'T DO ANYTHING
YET without thinking it first!... Read the Linux/UW installation
instructions after these SCO parts.

1.  ftp the following archive somewhere in your machine (e.g. /usr/tmp)

       'gcc-sco.tgz'    The GNU C Ver.2.7.2 with GNU binutils Ver.2.5.2.6
                        and GNU libc Ver.1.09
 
    this is a 'tar.gz' file, so you can rename it after ftp'ing if you
    wish -- now the name doesn't break the Messy-DOS 8+3 rule if you want
    to ftp this first to a such kind of system.

2.  You can look the contents of the file first with GNU tar's 'z' option:

       gtar tvzf gcc-sco.tgz | more

    or if you don't have the GNU tar, gunzip this first :

       gzip -c -d gcc-sco.tgz > gcc-sco.tar

    and look then inside it:

       tar tvf gcc-sco.tar | more

    As you can see, the 'target' type was 'i386-sco3.2', when building.
    This was selected because of the 14 character name limits in Xenix
    and SCO Unix 3.2.2

3.  untar this at the '/usr/local' directory. This extracts files to
    '/usr/local/bin' and to '/usr/local'-subdirectories. The command
    with the GNU tar is as follows:

       cd /usr/local
       gtar xvzf /usr/tmp/gcc-sco.tgz

     or with the SCO tar:

       tar xvf /usr/tmp/gcc-sco.tar

    Then you can link all that stuff 'ld', 'as', 'ar', 'ranlib',...
    and so on from '/usr/local/i386-sco3.2/bin' to the official search
    directory '/usr/local/bin' (that should be in your path)...

    You can change the name 'gcc-sco' to 'gcc' in '/usr/local/bin'.
    (This was archived on Linux that has its own 'native' gcc).

    The 'official' directories for this gcc are:

    /usr/local/i386-sco3.2/bin      - binaries (ar, gcc,...)
                          /lib      - libraries (libc.a, libm.a,...)
                          /include  - headers (*.h)

    /usr/local/lib/gcc-lib/i386-sco3.2       - assembler (as)

    /usr/local/lib/gcc-lib/i386-sco3.2/2.7.2 - cpp, cc1, ld, libgcc.a,
                                               specs,... 

    Here is the information from the 'gcc-sco -print-search-dirs'
    command' about the default search paths:

    install:   /usr/local/lib/gcc-lib/i386-sco3.2/2.7.2/

    programs:  /usr/local/lib/gcc-lib/i386-sco3.2/2.7.2/:
               /usr/local/lib/gcc-lib/i386-sco3.2/:
               /usr/lib/gcc/i386-sco3.2/2.7.2/:
               /usr/lib/gcc/i386-sco3.2/:
               /usr/local/i386-sco3.2/bin/i386-sco3.2/2.7.2/:
               /usr/local/i386-sco3.2/bin/

    libraries: /usr/local/lib/gcc-lib/i386-sco3.2/2.7.2/:
               /usr/lib/gcc/i386-sco3.2/2.7.2/:
               /usr/local/i386-sco3.2/lib/i386-sco3.2/2.7.2/:
               /usr/local/i386-sco3.2/lib/:
               /usr/local/lib/i386-sco3.2/2.7.2/:
               /usr/local/lib/:
               /lib/i386-sco3.2/2.7.2/:
               /lib/:
               /usr/lib/i386-sco3.2/2.7.2/:
               /usr/lib/

4.  check again that '/usr/local/bin' is in your search path...

5.  test the compiler & libraries & headers with your programs...

6.  report all the bugs (hope there aren't many of them ;-) to :
    'karuottu@freenet.hut.fi'


HOW TO INSTALL THESE ON LINUX OR UNIXWARE:

You cannot link the stuff in '/usr/local/i386-sco3.2/bin' to the
'/usr/local/bin' directory, this may overwrite files already there!!!
(perhaps you have a 'native' gcc already installed there...)

Instead do the following:

- link the 'gcc' and binutils executables from '/usr/local/i386-sco3.2/bin'
  to 'suitable' names in '/usr/local/bin' or '/usr/bin'.

The 'suitable' name for for this SCO/coff-version of 'gcc' could be
'gcc-sco', 'gcc-coff' or anything you like -- in '/usr/local/bin' or
'/usr/bin' -- with this you then start the compiler.

Use the same method to name the other executables. I have used the name
'*-sco' for the compiler drivers (gcc, g++) and the name '*-coff' for the
binutils -- both the SCO and go32 compiler use the same binutils...

You can always ask somebody, if your problem is only where to install
the files... The 'official' directories in 3. are however STRONGLY
RECOMMENDED -- if you later decide to install the cross-compilers to
DOS/DJGPP, OS2/DOS-emx, MC6811, 68K etc., it's nice to have all them
in a good order below '/usr/local' and '/usr/local/lib/gcc-lib'.

Enjoy,
        karuottu@freenet.hut.fi

PS. The xwpe-142.tgz is Fred Kruse's Integrated Development Environment
(a Borland-like system). You can use these sources to test your new
compiler. The packet has makefiles for text-only version for SCO-,
DOS/djgpp-crosscompiler, OS2/DOS-emx-crosscompiler and native Linux-gcc
with X and text-mode support.

If you have no religious opinions about other systems, you can also
take a look to the go32- and emx-crosscompilers to DOS, OS2 and Win32.

If you indeed have some -- isn't it nice you must not to use these
systems in order to make some software to them  and for their poor
users...

And when you have the cross-compiler, you can compile this SCO-compiler
to work as a cross-compiler under DOS or OS/2 or Win32 -- so those
poor users can learn to make programs to SCO -- I did this, the file
dos-sco.zip contains the DOS-version (go32-binaries) of this compiler...


